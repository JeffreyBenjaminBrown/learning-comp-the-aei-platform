* refs
** comp
https://github.com/comp-org/comp
** matchups, a baseball model
https://github.com/hdoupe/Matchups
* matchups
** notes
*** defaults
The 'description" and "notes" fields are appended in the UI, in that order, to become the message displayed when you hover over the "info" icon.
** asked, answered
*** why is the number_dims field 1 for batters but 0 for pitchers?
There can be multiple batters.
*** a database of what? apps? baseball stats?
**** answer: don't worry about it
The database is just the postgres database that powers the COMP website. As a model publishing an app with COMP, you shouldn't have to worry about the database. 
**** question: more detail
in the README.md and DATABASE.md documents for comp
 https://github.com/comp-org/comp

*** does spelling matter?
**** answer: yes
The reason Matchups asks the user to spell it right is that the list of names is too long for selecting from a dropdown to be convenient.
**** question: more detail
In Matchups/matchups/defaults.json, under the "pitcher" field there appears this note:
"Make sure the name of the pitcher is correct. A good place to reference this is baseball-reference.com"
That is followed by a validator that lists peoples' names. Does the validator obsolete the note?
*** Duplicates are meaningless in a validator
*** The name "compbaseball" is obsolete, replaced by "matchups".
** partially answered, to study
*** meta- vs. model parameters
**** what do they do?
***** answer
the meta parameters are passed to these three things
  the package defaults function
    https://github.com/comp-org/comp/blob/master/docs/ENDPOINTS.md#package-defaults
  the parse user adjustments function
    https://github.com/comp-org/comp/blob/master/docs/ENDPOINTS.md#parse-user-adjustemnts
  the run simulation function
    https://github.com/comp-org/comp/blob/master/docs/ENDPOINTS.md#run-simulation
***** question: more detail
 One should be described in schema.json, the other in defaults.json? But those files seem not to matter; COMP just wants some json returned by the Python interface functions, correct?
 Is the distinction that the meta parameters affect the set of defaults presented to the viewer?
**** where do they come from?
***** matchups uses ParamTools; COMP doesn't need it
ParamTools is what expects schema.json and defaults.json files.
***** question: more detail
In Matchups, I see metaparameters described in schema.json, and model parameters in defaults.json. But that's an immaterial distinction, right? COMP just wants some json returned by the Python interface functions, and doesn't care where that JSON came from, correct?
*** can I run a duplicate of COMP?
**** partial answer
The install instructions allow you to run a local instance of comp. It'll be served locally at http://127.0.0.1:8000/. You are welcome to spin up a local instance of COMP and see how things look. A few of my friends have been able to get it running locally with minimal help. So, it can be done, but it's definitely not required. You can just fill out the publishing template, I'll plug everything in for you, and I'll push it to a demo server for your review.
**** question, detail
Does the "install instructions" section of the COMP readme indicate how to actually serve a webpage like https://www.compmodels.com/? (I can't imagine what else it would do, but I don't want to go through the work of installing it before knowing I'm doing it.)
** unsure whether to send
*** the code appears not to correspond to the program output
For instance, when I run the model at "https://www.compmodels.com/hdoupe/matchups/", one window reads "Proportion of pitch type by count". But if I grep my clone of the matchups repo for the word "Proportion"
*** should I send python code to execute the docker container
* ParamTools
** optional dimensions can have dimension zero?
e.g. from the the example at
    https://paramtools.readthedocs.io/en/latest/spec.html#specification-schema
there's
    "section_3": {"type": "str", "number_dims": 0},
** questions
*** what is array_first?
And why is it both global to the Parameters class (#1 below) and local to a particular instance of Parameters (#2 below)?

class Parameters:
    ...
    array_first = False # 1

    def __init__( self, initial_state=None ... # 2

